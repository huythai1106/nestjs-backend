// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int            @id @default(autoincrement())
  email            String         @unique
  hashedPassword   String
  firstName        String?
  lastName         String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  role             Role           @default(USER)
  photoURL         String?
  description      String?
  phoneNumber      String?
  address          String?
  notes            Note[]
  works            UsersOnWorks[]
  postJob          PostJob[]
  Application      Application[]
  Contract         Contract[]
  employeeContract Contract[]     @relation(name: "employee")

  @@map("users") // users id "table's name" in PostgreSQL
}

model Note {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
  user        User     @relation(fields: [userId], references: [id])

  @@map("notes")
}

model Work {
  id        Int            @id @default(autoincrement())
  name      String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      UsersOnWorks[]
  postJob   PostJob[]

  @@map("works")
}

model UsersOnWorks {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  workId    Int
  work      Work     @relation(fields: [workId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("usersonworks")
}

model PostJob {
  id          Int           @id @default(autoincrement())
  user        User          @relation(fields: [userId], references: [id])
  userId      Int
  work        Work          @relation(fields: [workId], references: [id])
  workId      Int
  address     String
  time        DateTime
  descrition  String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Application Application[]

  @@map("postjobs")
}

model Application {
  id         Int     @id @default(autoincrement())
  employee   User    @relation(fields: [employeeId], references: [id])
  employeeId Int
  content    String?
  postJob    PostJob @relation(fields: [postJobId], references: [id])
  postJobId  Int
  status     Boolean

  @@map("applications")
}

model Contract {
  id      Int    @id @default(autoincrement())
  user1Id Int
  user1   User   @relation(fields: [user1Id], references: [id])
  user2Id Int
  user2   User   @relation(name: "employee", fields: [user2Id], references: [id])
  content String
  status  Status

  @@map("contracts")
}

enum Status {
  PROCESSING
  COMPLETED
}

enum Role {
  USER
  EMPLOYEE
  ADMIN
}
